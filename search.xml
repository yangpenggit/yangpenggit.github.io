<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类、接口、类图</title>
      <link href="2021/03/24/java-lei-jie-kou-lei-tu/"/>
      <url>2021/03/24/java-lei-jie-kou-lei-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><ol><li>类<br>类（Class）是指具有相同属性、方法和关系的对象的抽象，它封装了数据和行为，是面向对象程序设计（OOP）的基础，具有封装性、继承性和多态性等三大特性。在 UML 中，类使用包含类名、属性和操作且带有分隔线的矩形来表示。</li></ol><p>(1) 类名（Name）是一个字符串，例如，Student。</p><p>(2) 属性（Attribute）是指类的特性，即类的成员变量。UML 按以下格式表示：<br>[可见性]属性名:类型[=默认值]<br>例如：-name:String</p><p>注意：“可见性”表示该属性对类外的元素是否可见，包括公有（Public）、私有（Private）、受保护（Protected）和朋友（Friendly）4 种，在类图中分别用符号+、-、#、~表示。</p><p>(3) 操作（Operations）是类的任意一个实例对象都可以使用的行为，是类的成员方法。UML 按以下格式表示：<br>[可见性]名称(参数列表)[:返回类型]<br>例如：+display():void。</p><p>如下所示是学生类的 UML 表示。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/1.gif" alt="Student 类"><br>类图用 3 个矩形拼接表示，最上面的部分标识类的名称，中间的部分标识类的属性，最下面的部分标识类的方法。</p><p>类图中，需注意以下几点：<br>1.抽象类或抽象方法用斜体表示<br>2.如果是接口，则在类名上方加 &lt;<Interface>&gt;<br>3.字段和方法返回值的数据类型非必需<br>4.静态类或静态方法加下划线</Interface></p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口（Interface）是一种特殊的类，它具有类的结构但不可被实例化，只可以被子类实现。它包含抽象操作，但不包含属性。它描述了类或组件对外可见的动作。在 UML 中，接口使用一个带有名称的小圆圈来进行表示。</p><p>如下所示是图形类接口的 UML 表示。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/2.gif" alt="Graph 接口"></p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>类图（ClassDiagram）是用来显示系统中的类、接口、协作以及它们之间的静态结构和关系的一种静态模型。它主要用于描述软件系统的结构化设计，帮助人们简化对软件系统的理解，它是系统分析与设计阶段的重要产物，也是系统编码与测试的重要模型依据。</p><p>类图中的类可以通过某种编程语言直接实现。类图在软件系统开发的整个生命周期都是有效的，它是面向对象系统的建模中最常见的图。如下所示是“计算长方形和圆形的周长与面积”的类图，图形接口有计算面积和周长的抽象方法，长方形和圆形实现这两个方法供访问类调用。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/3.gif" alt="“计算长方形和圆形的周长与面积”的类图"></p><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><p>UML 将事物之间的联系归纳为 6 种，并用对应的图形类表示。下面根据类与类之间的耦合度从弱到强排列。UML 中的类图有以下几种关系：依赖关系、关联关系、聚合关系、组合关系、泛化关系和实现关系。其中泛化和实现的耦合度相等，它们是最强的。</p><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>依赖（Dependency）关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。如下是人与手机的关系图，人通过手机的语音传送方法打电话。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/4.gif" alt="依赖关系的实例"></p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>关联（Association）关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联可以是双向的，也可以是单向的。在 UML 类图中，双向的关联可以用带两个箭头或者没有箭头的实线来表示，单向的关联用带一个箭头的实线来表示，箭头从使用类指向被关联的类。也可以在关联线的两端标注角色名，代表两种不同的角色。</p><p>在代码中通常将一个类的对象作为另一个类的成员变量来实现关联关系。如下是老师和学生的关系图，每个老师可以教多个学生，每个学生也可向多个老师学，他们是双向关联。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/5.gif" alt="关联关系的实例"></p><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>聚合（Aggregation）关系是关联关系的一种，是强关联关系，是整体和部分之间的关系，是 has-a 的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。如下是大学和教师的关系图。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/6.gif" alt="聚合关系的实例"></p><h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><p>组合（Composition）关系也是关联关系的一种，也表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系，是 cxmtains-a 关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。如下是头和嘴的关系图。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/7.gif" alt="组合关系的实例"></p><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><p>泛化（Generalization）关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系，是 is-a 的关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下所示。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/8.gif" alt="泛化关系的实例"></p><h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><p>实现（Realization）关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如下所示。<br><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/9.gif" alt="实现关系的实例"></p><p>注意：UML 的标准类关系图中，没有实心箭头。有些 Java 编程的 IDE 自带类生成工具可能出现实心箭头，主要目的是降低理解难度。</p><p>下面用一个经典案例来加深和巩固对类图的理解。下图是对动物衍生关系描述的类图。这个图非常有技术含量也非常经典，大家可以好好理解一下。</p><p><img src="/images/java%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E7%B1%BB%E5%9B%BE/10.jpg" alt="动物衍生关系描述类图"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UML </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot框架搭建</title>
      <link href="2021/03/23/idea-chuang-jian-springboot-xiang-mu/"/>
      <url>2021/03/23/idea-chuang-jian-springboot-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="IDEA2020-1、JDK1-8"><a href="#IDEA2020-1、JDK1-8" class="headerlink" title="IDEA2020.1、JDK1.8"></a>IDEA2020.1、JDK1.8</h3><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h3><p><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/1.png" alt="1"></p><p>选择SPRING Initializr，Project SDK可能需要选一下，选自己用的JDK就好了</p><p><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/2.png" alt="2"></p><p>点击Next后就到了选择依赖步骤<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/3.png" alt="3"></p><p>我们选中左边框框的Web，然后再点上右边Web的框框<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/4.png" alt="4"></p><p>点击Next后就到了选择保存项目路径的步骤<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/5.png" alt="5"></p><p>新建项目后就出现这样一个结构<br>SpringbootApplication是springboot的启动类<br>把application.properties改成application.yml<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/7.png" alt="7"></p><p>application.yml配置<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/8.png" alt="8"></p><p>在TestController类上添加注解@RestController<br>这个注解是@ResponseBody与@Controller两个注解的合体版<br>作用是在每个方法上面增加@ResponseBody注解<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/9.png" alt="9"></p><p>浏览器访问 ip:端口/test<br><img src="/images/IDEA%E5%88%9B%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/10.png" alt="10"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令</title>
      <link href="2021/03/23/linux-chang-yong-ming-ling/"/>
      <url>2021/03/23/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><pre class=" language-bash"><code class="language-bash">$ ctrl + l  </code></pre><h3 id="查看实时日志"><a href="#查看实时日志" class="headerlink" title="查看实时日志"></a>查看实时日志</h3><pre class=" language-bash"><code class="language-bash">$  <span class="token function">tail</span> -f xxxx.log      实时监控日志 </code></pre><h3 id="查看IP"><a href="#查看IP" class="headerlink" title="查看IP"></a>查看IP</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ifconfig</span></code></pre><p>如果提示命令不存在则需要安装网络工具</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> net-tools -y</code></pre><p>如果ifconfig不能显示ipv4地址则使用该命令</p><pre class=" language-bash"><code class="language-bash">$ ip addr</code></pre><h3 id="查看端口号使用情况"><a href="#查看端口号使用情况" class="headerlink" title="查看端口号使用情况"></a>查看端口号使用情况</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">netstat</span> -tunlp <span class="token operator">|</span> <span class="token function">grep</span> xxxx$ <span class="token function">lsof</span> i:xxxx</code></pre><p>最后面的xxxx为端口号</p><h3 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">kill</span> -9 pid</code></pre><p>pid为进程的pid</p><h3 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> –xvzf xxxxxx.tar.gz</code></pre><p>参数说明<br>-c 创建.tar格式的文bai件du<br>-x 解开.tar格式的文件<br>-f 使用归档文件<br>-v 显示详细zhi信息<br>-t 查看包内文件<br>-j 使用baip2程序<br>-z 使用gzip程序<br>-p 打包时保dao留文件及目录的权限<br>-P 打包时保留文件及目录的绝对路径<br>-C 释放的目的地</p><h3 id="进入到某个目录"><a href="#进入到某个目录" class="headerlink" title="进入到某个目录"></a>进入到某个目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> 目录名</code></pre><h3 id="回到上一级目录"><a href="#回到上一级目录" class="headerlink" title="回到上一级目录"></a>回到上一级目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> <span class="token punctuation">..</span></code></pre><h3 id="回到根目录"><a href="#回到根目录" class="headerlink" title="回到根目录"></a>回到根目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /</code></pre><h3 id="切换到home目录"><a href="#切换到home目录" class="headerlink" title="切换到home目录"></a>切换到home目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~ </code></pre><h3 id="切换到上次访问的目录"><a href="#切换到上次访问的目录" class="headerlink" title="切换到上次访问的目录"></a>切换到上次访问的目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> -      </code></pre><h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><h3 id="获取最高权限"><a href="#获取最高权限" class="headerlink" title="获取最高权限"></a>获取最高权限</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">su</span></code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">reboot</span></code></pre><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><pre class=" language-bash"><code class="language-bash">$ halt</code></pre><h3 id="立刻关机"><a href="#立刻关机" class="headerlink" title="立刻关机"></a>立刻关机</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -h now</code></pre><h3 id="10分钟后自动关机"><a href="#10分钟后自动关机" class="headerlink" title="10分钟后自动关机"></a>10分钟后自动关机</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -h 10</code></pre><h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="查看当前目录"><a href="#查看当前目录" class="headerlink" title="查看当前目录"></a>查看当前目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">pwd</span></code></pre><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> 目录名称</code></pre><h3 id="创建多级目录"><a href="#创建多级目录" class="headerlink" title="创建多级目录"></a>创建多级目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p 目录名称</code></pre><p>例: 在 /usr/local/abcd/efg下创建hijk目录,每一个层级,如果有一层不存在则会创建</p><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">rm</span> -rf 目录名称</code></pre><h3 id="移动目录"><a href="#移动目录" class="headerlink" title="移动目录"></a>移动目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mv</span> 源目录路径 目标目录路径</code></pre><p>Tips: 在相同的目录下则是修改名称</p><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> 源目录路径 目标目录路径</code></pre><h3 id="搜索目录【查】"><a href="#搜索目录【查】" class="headerlink" title="搜索目录【查】"></a>搜索目录【查】</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> 目录 参数 文件名称</code></pre><p>示例：find /usr/tmp -name ‘a*’    查找/usr/tmp目录下的所有以a开头的目录或文件</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">touch</span> 文件名称</code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">rm</span> 文件名称</code></pre><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mv</span> 文件名称 目标位置</code></pre><p>Tips: 在相同的目录下则是修改名称</p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> 文件名 目标位置</code></pre><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h3><pre class=" language-bash"><code class="language-bash">$ vim 文件名</code></pre><p>如果提示vim不存在则安装</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> vim* -y</code></pre><p>左下角没有Insert或插入按i键,有直接编辑</p><p>编辑完后可以使用以下命令:</p><p>:wq保存并强制退出<br>:wq filename 以filename为文件名保存后强制退出；<br>:w保存<br>:w fileName 另存为fileName<br>:q 强制退出<br>:x 保存并退出（仅当文件有变化时保存）<br>u 撤回</p><h3 id="打开图片"><a href="#打开图片" class="headerlink" title="打开图片"></a>打开图片</h3><pre class=" language-bash"><code class="language-bash">$ eog<span class="token punctuation">(</span>eye of gmone，是linux下内置的图片查看器<span class="token punctuation">)</span> 图片名.后缀</code></pre><h2 id="安全操作"><a href="#安全操作" class="headerlink" title="安全操作"></a>安全操作</h2><h3 id="查看开放的端口号"><a href="#查看开放的端口号" class="headerlink" title="查看开放的端口号"></a>查看开放的端口号</h3><pre class=" language-bash"><code class="language-bash">$ firewall-cmd --list-ports</code></pre><h3 id="开放端口号"><a href="#开放端口号" class="headerlink" title="开放端口号"></a>开放端口号</h3><pre class=" language-bash"><code class="language-bash">$ firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>xxx/tcp --permanent</code></pre><p>其中 –add-port=xxx, xxx为端口号</p><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><p>开放端口号后需要重启防火墙</p><pre class=" language-bash"><code class="language-bash">$ firewall-cmd --reload</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/21/hello-world/"/>
      <url>2021/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
